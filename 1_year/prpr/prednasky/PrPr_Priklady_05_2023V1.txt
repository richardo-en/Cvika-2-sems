#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include <string.h>
#include <stdlib.h>
#include <crtdbg.h>



//bez ukazovatelov a s
void odelovac(){
   printf("\n **********************************************************\n");
}

//ukazka 1

//ukazka 2


//ukazka 3



//ukazka 4


//ukazka 5
/*









// staticke pole
/*
#define N 10

int main() {
	int y[3] = { 1, 2, 3 };

	int x[N], i;

	x[0] = 1;

	for (i = 0; i < N; i++)
		x[i] = i + 1;

	for (i = 0; i < N; i++)
		printf("x[%d]: %d\n", i, x[i]);

	return 0;
}
*/


//dynamicke polia -- malloc
/*
int main()
{
	int* pole;
	int n,i;

	//zisit velkost pola (vstup od pouzivatela)
	scanf("%d", &n);

	//alokuj pamat pre pole
	pole = (int*)malloc(n * sizeof(int));
	if (pole == NULL) {
		printf("Pole sa nepodarilo vytvorit.\n");
		exit(EXIT_FAILURE);
	}
	//vypis prvky pola
	for (i = 0; i < n; i++)
		printf("%d\n", pole[i]);

	//pristup k prvkom pola
	for (i = 0; i < n; ++i)
		pole[i] = i + 1;

	//vypis prvky pola
	for (i = 0; i < n; i++)
		printf("%d\n", pole[i]);

	//uvolni alokovanu pamat pola a nastav jeho ukazovatel na NULL
	free(pole);
	pole = NULL;

	return 0;
}

*/

//dynamicke polia -- calloc
/*
int main()
{
	int* pole;
	int n,i;

	//zisit velkost pola (vstup od pouzivatela)
	scanf("%d", &n);

	//alokuj pamat pre pole
	pole = (int*)calloc(n, sizeof(int));
	if (pole == NULL) {
		printf("Pole sa nepodarilo vytvorit.\n");
		exit(EXIT_FAILURE);
	}
	//vypis prvky pola
	for (i = 0; i < n; i++)
		printf("%d\n", pole[i]);

	//pristup k prvkom pola
	for (i = 0; i < n; ++i)
		pole[i] = i + 1;

	//vypis prvky pola
	for (i = 0; i < n; i++)
		printf("%d\n", pole[i]);

	//uvolni alokovanu pamat pola a nastav jeho ukazovatel na NULL
	free(pole);
	pole = NULL;

	return 0;
}
*/

//dynamicke polia -- realloc
/*
int main()
{
	int* pole;
	int n,i;

	scanf("%d", &n);

	// Alokacia pomocou calloc() 
	pole = (int*)calloc(n, sizeof(int));

	// Kontrola uspesnej alokacie
	if (pole == NULL) {
		printf("Pole sa nepodarilo vytvorit.\n");
		exit(EXIT_FAILURE);
	}

	//pristup k prvkom pola
	for (i = 0; i < n; ++i)
		pole[i] = i + 1;

	//vypis prvky pola
	for (i = 0; i < n; i++)
		printf("%d\n", pole[i]);

	//nova velkost pola
	scanf("%d", &n);
	printf("---------------------------\n");

	// Dynamicka re-alokacia pamate pomocou realloc() 
	pole = (int*)realloc(pole, n * sizeof(int));

	//vypis prvky pola
	for (i = 0; i < n; i++)
		printf("%d\n", pole[i]);
	printf("---------------------------\n");

	//pristup k prvkom pola
	for (i = 0; i < n; ++i)
		pole[i] = i + 1;

	//vypis prvky pola
	for (i = 0; i < n; i++)
		printf("%d\n", pole[i]);
	printf("---------------------------\n");

	free(pole);
	pole = NULL;

	return 0;
}
*/

//dynamicke polia -- memset
/*
int main()
{
	int* pole;
	int n,i;

	scanf("%d", &n);

	pole = (int*)calloc(n, sizeof(int));
	memset(pole, 0, n * sizeof(int));
	//memset(pole, 1, n*sizeof(int)); 

	for ( i = 0; i < n; i++) {
		printf("%d\n", pole[i]);
		printf("%x\n", pole[i]);
		printf("\n");
	}

	return 0;
}
*/

//////////////////
//ukazatelova aritmerika
//////////////////
/*
void alokujPole(int** p_pole, int n)
{
	*p_pole = (int *)malloc(n * sizeof(int));
}

int* alokuj(int n)
{
	return ((int*)malloc(n * sizeof(int)));
}

void nacitaj(int* pole, int n)
{
	for (int i = 0; i < n; i++) {
		printf("Zadajte %d-te cislo: ", i + 1);
		scanf(" %d", pole + i);
	}
}

void vypis(int pole[], int n)
{
	for (int i = 0; i < n; i++)
		printf("%d\n", *(pole + i));//pole[i]
}

int maximum(int pole[], int n)
{
	int* p_max = pole, * p;
	for (p = pole + 1; p < pole + n; p++) {
		if (*p > * p_max)
			p_max = p;
	}
	return (*p_max);
}

int main()
{
	int n = 4;
	int* pole = NULL;

	alokujPole(&pole, n);
	nacitaj(pole, n);
	vypis(pole, n);
	vypis(&pole[2], (n - 2));
	printf("\n\n maximum pola je: %d",maximum(pole, n));
	printf("\n\n maximum pola je: %d", maximum(&pole[1], 3));
	free(pole);
	pole = NULL;

	return 0;
}
*/


/*

void test1(){
   const int NUM=3;
   int i;
   int *pole1 = (int*)malloc(NUM);  //*sizeof(int)
   for(i=0; i<NUM; i++)
   {
     pole1[i]=i*i;
     printf("%d: %d\n",i,pole1[i]);
    }
   
}

void test2(){
   const int NUM=3;
   int i;
   double *pole2 = (double*)malloc(NUM * sizeof(double));  // sizeof(pole2)
   for(i=0; i<NUM; i++)
   {
     pole2[i]=100 + i;
     printf("%d: %lf\n",i,pole2[i]);
    }
   free(pole2);
   pole2 = NULL;
   pole2[0] = 0; //VS padne
}

void test3(){
   const int NUM = 10;
   int i;
   int *pole3 = (int*)malloc(NUM * sizeof(*pole3)); 
   for(i=0; i<NUM; i++)
   {
     if(pole3 = NULL){  //= VS ==
       pole3 = (int*)malloc(NUM * sizeof(*pole3)); 
     }
   }
   free(pole3);
}

int main(){
    printf("\ntest1\n");   test1(); 
    printf("\ntest2\n");   test2();
    printf("\ntest3\n");   test3();
    _CrtDumpMemoryLeaks();
    return(0);
}

*/